Description: >
    Udacity Deploy a high-availability web app using CloudFormation
    To spin up server resources
    By Marei Morsy

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    EC2ImageId:
        Description: EC2 Amazon Machine Image ID
        Type: String
        Default: "ami-0729e439b6769d6ab"

    EC2InstanceType:
        Description: EC2 Instance Type
        Type: String
        Default: "t3.medium"

    EBSVolumeSize:
        Description: The Block storage volume size
        Type: String
        Default: "10"

    ASGMinSize:
        Description: The minimum size of instances in AutoScaling Group
        Type: String
        Default: 4

    ASGMaxSize:
        Description: The maximum size of instances in AutoScaling Group
        Type: String
        Default: 8
        
    # Dependencies
    VPC:
        Type: String
    VPCPublicRouteTable:
        Type: String
    VPCPrivateRouteTable1:
        Type: String
    VPCPrivateRouteTable2:
        Type: String
    PublicSubnets:
        Type: String
    PrivateSubnets:
        Type: String
    PublicSubnet1:
        Type: String
    PublicSubnet2:
        Type: String
    PrivateSubnet1:
        Type: String
    PrivateSubnet2:
        Type: String

Resources:

    LBSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |      
            #!/bin/bash
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            echo "Udacity Demo Web Server Up and Running!" > index.html
        ImageId: !Ref EC2ImageId
        SecurityGroups:
        - Ref: WebServerSecGroup
        InstanceType: !Ref EC2InstanceType
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: !Ref EBSVolumeSize
    WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
        - Fn::ImportValue:
            # DEBUG: revert back to public for debugging purposes
            # !Sub "${EnvironmentName}-PUB-NETS"
            !Sub "${EnvironmentName}-PRIV-NETS"
        LaunchConfigurationName:
          Ref: WebAppLaunchConfig
        MinSize: !Ref ASGMinSize
        MaxSize: !Ref ASGMaxSize
        TargetGroupARNs:
        - Ref: WebAppTargetGroup
    WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        SecurityGroups:
        - Ref: LBSecGroup
    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppLB
        Port: '80'
        Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1
    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: 
          Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:

    WebAppLBDNSName:
        Description: add http:// to LB DNS Name
        Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
        Export:
          Name: !Sub ${EnvironmentName}-LB-DNSName